// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: sshProto.proto

package firmware_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FirmwareDeviceClient is the client API for FirmwareDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirmwareDeviceClient interface {
	UPDFWType(ctx context.Context, in *UPDFWTypeRequest, opts ...grpc.CallOption) (*UPDFWTypeResponse, error)
	UpdateFirmware(ctx context.Context, in *UpdateFirmwareRequest, opts ...grpc.CallOption) (*UpdateFirmwareResponse, error)
	Preset(ctx context.Context, in *PresetRequest, opts ...grpc.CallOption) (*PresetResponse, error)
}

type firmwareDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewFirmwareDeviceClient(cc grpc.ClientConnInterface) FirmwareDeviceClient {
	return &firmwareDeviceClient{cc}
}

func (c *firmwareDeviceClient) UPDFWType(ctx context.Context, in *UPDFWTypeRequest, opts ...grpc.CallOption) (*UPDFWTypeResponse, error) {
	out := new(UPDFWTypeResponse)
	err := c.cc.Invoke(ctx, "/SshTftfProto.FirmwareDevice/UPDFWType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareDeviceClient) UpdateFirmware(ctx context.Context, in *UpdateFirmwareRequest, opts ...grpc.CallOption) (*UpdateFirmwareResponse, error) {
	out := new(UpdateFirmwareResponse)
	err := c.cc.Invoke(ctx, "/SshTftfProto.FirmwareDevice/UpdateFirmware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareDeviceClient) Preset(ctx context.Context, in *PresetRequest, opts ...grpc.CallOption) (*PresetResponse, error) {
	out := new(PresetResponse)
	err := c.cc.Invoke(ctx, "/SshTftfProto.FirmwareDevice/Preset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirmwareDeviceServer is the server API for FirmwareDevice service.
// All implementations must embed UnimplementedFirmwareDeviceServer
// for forward compatibility
type FirmwareDeviceServer interface {
	UPDFWType(context.Context, *UPDFWTypeRequest) (*UPDFWTypeResponse, error)
	UpdateFirmware(context.Context, *UpdateFirmwareRequest) (*UpdateFirmwareResponse, error)
	Preset(context.Context, *PresetRequest) (*PresetResponse, error)
	mustEmbedUnimplementedFirmwareDeviceServer()
}

// UnimplementedFirmwareDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedFirmwareDeviceServer struct {
}

func (UnimplementedFirmwareDeviceServer) UPDFWType(context.Context, *UPDFWTypeRequest) (*UPDFWTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UPDFWType not implemented")
}
func (UnimplementedFirmwareDeviceServer) UpdateFirmware(context.Context, *UpdateFirmwareRequest) (*UpdateFirmwareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFirmware not implemented")
}
func (UnimplementedFirmwareDeviceServer) Preset(context.Context, *PresetRequest) (*PresetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preset not implemented")
}
func (UnimplementedFirmwareDeviceServer) mustEmbedUnimplementedFirmwareDeviceServer() {}

// UnsafeFirmwareDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirmwareDeviceServer will
// result in compilation errors.
type UnsafeFirmwareDeviceServer interface {
	mustEmbedUnimplementedFirmwareDeviceServer()
}

func RegisterFirmwareDeviceServer(s grpc.ServiceRegistrar, srv FirmwareDeviceServer) {
	s.RegisterService(&FirmwareDevice_ServiceDesc, srv)
}

func _FirmwareDevice_UPDFWType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UPDFWTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareDeviceServer).UPDFWType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SshTftfProto.FirmwareDevice/UPDFWType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareDeviceServer).UPDFWType(ctx, req.(*UPDFWTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareDevice_UpdateFirmware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFirmwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareDeviceServer).UpdateFirmware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SshTftfProto.FirmwareDevice/UpdateFirmware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareDeviceServer).UpdateFirmware(ctx, req.(*UpdateFirmwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareDevice_Preset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareDeviceServer).Preset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SshTftfProto.FirmwareDevice/Preset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareDeviceServer).Preset(ctx, req.(*PresetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FirmwareDevice_ServiceDesc is the grpc.ServiceDesc for FirmwareDevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FirmwareDevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SshTftfProto.FirmwareDevice",
	HandlerType: (*FirmwareDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UPDFWType",
			Handler:    _FirmwareDevice_UPDFWType_Handler,
		},
		{
			MethodName: "UpdateFirmware",
			Handler:    _FirmwareDevice_UpdateFirmware_Handler,
		},
		{
			MethodName: "Preset",
			Handler:    _FirmwareDevice_Preset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sshProto.proto",
}
